//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/AutoCloseable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangAutoCloseable")
#ifdef RESTRICT_JavaLangAutoCloseable
#define INCLUDE_ALL_JavaLangAutoCloseable 0
#else
#define INCLUDE_ALL_JavaLangAutoCloseable 1
#endif
#undef RESTRICT_JavaLangAutoCloseable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangAutoCloseable_) && (INCLUDE_ALL_JavaLangAutoCloseable || defined(INCLUDE_JavaLangAutoCloseable))
#define JavaLangAutoCloseable_

/*!
 @brief An object that may hold resources (such as file or socket handles)
  until it is closed.The <code>close()</code> method of an <code>AutoCloseable</code>
  object is called automatically when exiting a <code>try</code>
 -with-resources block for which the object has been declared in
  the resource specification header.
 This construction ensures prompt
  release, avoiding resource exhaustion exceptions and errors that
  may otherwise occur.
 @author Josh Bloch
 @since 1.7
 */
@protocol JavaLangAutoCloseable < JavaObject >

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangAutoCloseable)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangAutoCloseable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangAutoCloseable")
