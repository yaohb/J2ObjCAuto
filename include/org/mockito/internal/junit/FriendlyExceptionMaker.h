//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/antoniocortes/j2objcprj/relases/j2objc/testing/mockito/build_result/java/org/mockito/internal/junit/FriendlyExceptionMaker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalJunitFriendlyExceptionMaker")
#ifdef RESTRICT_OrgMockitoInternalJunitFriendlyExceptionMaker
#define INCLUDE_ALL_OrgMockitoInternalJunitFriendlyExceptionMaker 0
#else
#define INCLUDE_ALL_OrgMockitoInternalJunitFriendlyExceptionMaker 1
#endif
#undef RESTRICT_OrgMockitoInternalJunitFriendlyExceptionMaker

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalJunitFriendlyExceptionMaker_) && (INCLUDE_ALL_OrgMockitoInternalJunitFriendlyExceptionMaker || defined(INCLUDE_OrgMockitoInternalJunitFriendlyExceptionMaker))
#define OrgMockitoInternalJunitFriendlyExceptionMaker_

@class JavaLangAssertionError;
@class OrgMockitoInternalJunitJUnitDetecter;

/*!
 @brief If JUnit is used, we can use an exception that extends from ComparisonFailure
  and hence provide a better IDE support as the comparison result is comparable
 */
@interface OrgMockitoInternalJunitFriendlyExceptionMaker : NSObject

#pragma mark Public

- (JavaLangAssertionError *)createArgumentsAreDifferentExceptionWithNSString:(NSString *)message
                                                                withNSString:(NSString *)wanted
                                                                withNSString:(NSString *)actual;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgMockitoInternalJunitJUnitDetecter:(OrgMockitoInternalJunitJUnitDetecter *)detecter;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalJunitFriendlyExceptionMaker)

FOUNDATION_EXPORT void OrgMockitoInternalJunitFriendlyExceptionMaker_initWithOrgMockitoInternalJunitJUnitDetecter_(OrgMockitoInternalJunitFriendlyExceptionMaker *self, OrgMockitoInternalJunitJUnitDetecter *detecter);

FOUNDATION_EXPORT OrgMockitoInternalJunitFriendlyExceptionMaker *new_OrgMockitoInternalJunitFriendlyExceptionMaker_initWithOrgMockitoInternalJunitJUnitDetecter_(OrgMockitoInternalJunitJUnitDetecter *detecter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalJunitFriendlyExceptionMaker *create_OrgMockitoInternalJunitFriendlyExceptionMaker_initWithOrgMockitoInternalJunitJUnitDetecter_(OrgMockitoInternalJunitJUnitDetecter *detecter);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalJunitFriendlyExceptionMaker)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalJunitFriendlyExceptionMaker")
